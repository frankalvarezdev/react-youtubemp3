{"version":3,"sources":["lib/youtubemp3.js","components/DownloadForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["getYoutubeId","url","match","length","getVideoInfo","id","a","axios","get","videoInfo","data","getLink","html","bitrate","regex","RegExp","test","generateDownloadLinks","response","result","link","push","youtubemp3","videoId","downloadLinks","info","links","StringType","Schema","Types","youtubeRegex","model","Model","addRule","value","isRequired","DownloadForm","useState","loading","setLoading","setData","startDownload","document","querySelector","toaster","Notification","type","header","placement","Form","className","onSubmit","Group","controlId","Control","placeholder","name","Button","src","thumbnail_url","alt","title","author_name","map","i","href","data-icon","App","CustomProvider","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8NAGMA,EAAe,SAACC,GAClB,IACIC,EAAQD,EAAIC,MADJ,6EAEZ,SAAQA,GAA6B,KAApBA,EAAM,GAAGC,SAAiBD,EAAM,IAI/CE,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACKC,IAAMC,IAAN,wEAA2EH,IADhF,cACbI,EADa,yBAEVA,EAAUC,MAFA,2CAAH,sDAMZC,EAAU,SAACC,GAAyB,IAAnBC,EAAkB,uDAAR,IAC5BC,EAAQ,IAAIC,OAAJ,kDAAsDF,EAAtD,kBAA+E,KAE3F,GAAIC,EAAME,KAAKJ,GAAO,CAErB,IAAIX,EAAMW,EAAKV,MAAMY,GAErB,OAAOb,EAAIE,OAAS,GAAIF,EAAI,GAG7B,OAAO,GAIFgB,EAAqB,uCAAG,WAAOZ,GAAP,2BAAAC,EAAA,sEAENC,IAAMC,IAAN,+CAAkDH,IAF5C,OAS7B,IAPMa,EAFuB,OAGvBN,EAAOM,EAASR,KAGlBS,EAAS,GAGb,MAJiB,CAAC,GAAI,IAAK,IAAK,IAAK,KAIrC,gBACaC,EAAOT,EAAQC,EADjBC,EAAqB,QAIrBM,EAAOE,KAAK,CAACR,QAASA,EAASZ,IAAKmB,IAblB,yBAiBtBD,GAjBsB,2CAAH,sDAqBrBG,EAAU,uCAAG,WAAOrB,GAAP,mBAAAK,EAAA,6DACTiB,EAAUvB,EAAaC,GADd,SAGOG,EAAamB,GAHpB,cAGXd,EAHW,gBAIWQ,EAAsBM,GAJjC,aAIXC,EAJW,QAMGrB,OAAS,GANZ,0CAOJ,CACHsB,KAAMhB,EACNiB,MAAOF,IATA,kCAYJ,GAZI,4CAAH,sD,oDC/CRG,EAAeC,IAAOC,MAAtBF,WAEFG,EAAe,+DAEfC,EAAQH,IAAOI,MAAM,CACvB/B,IAAK0B,IACAM,SAAQ,SAACC,EAAOxB,GAEb,QAAIoB,EAAad,KAAKkB,KAKvB,oBACFC,WAAW,6BA+DLC,EA5DM,WAAO,IAAD,EAEOC,oBAAS,GAFhB,mBAEhBC,EAFgB,KAEPC,EAFO,OAGCF,qBAHD,mBAGhB3B,EAHgB,KAGV8B,EAHU,KAMjBC,EAAa,uCAAG,8BAAAnC,EAAA,yDAGZL,EAAMyC,SAASC,cAAc,qBAAqBT,MACnDJ,EAAad,KAAKf,IAAgB,KAARA,EAJb,wDAMlBsC,GAAW,kBAAM,KANC,SASGjB,EAAWrB,GATd,OASZkB,EATY,OAWlBoB,GAAW,kBAAM,KAEbpB,EACAqB,GAAQ,kBAAMrB,KAEdyB,IAAQvB,KAAK,cAACwB,EAAA,EAAD,CAAcC,KAAK,QAAQC,OAAO,yBAA2B,CAAEC,UAAW,WAhBzE,2CAAH,qDAqBnB,OACI,qCACI,eAACC,EAAA,EAAD,CAAMlB,MAAOA,EAAOmB,UAAU,kBAAkBC,SAAUV,EAA1D,UACI,oBAAIS,UAAU,SAAd,yBACA,uBACA,cAACD,EAAA,EAAKG,MAAN,CAAYC,UAAU,MAAtB,SACI,cAACJ,EAAA,EAAKK,QAAN,CAAcJ,UAAU,mBAAmBK,YAAY,iBAAiBC,KAAK,UAEjF,qBAAKN,UAAU,oBAAf,SACI,cAACO,EAAA,EAAD,CAAQX,KAAK,SAASR,QAASA,EAA/B,4BAMP5B,GACG,sBAAKwC,UAAU,aAAf,UACI,qBAAKQ,IAAKhD,EAAKe,KAAKkC,cAAeC,IAAI,YAEvC,6BAAKlD,EAAKe,KAAKoC,QACf,8BAAInD,EAAKe,KAAKqC,YAAd,OAECpD,EAAKgB,MAAMqC,KAAI,SAAC3C,EAAM4C,GAAP,OACZ,oBAAWC,KAAM7C,EAAKnB,IAAKiD,UAAU,aAArC,UACI,mBAAGgB,YAAU,kBADjB,iBACoD9C,EAAKP,QADzD,UAAQmD,a,yBC1DjBG,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBC,MAAM,OAAtB,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BZ,M","file":"static/js/main.d5a1e065.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// obtiene el id del video\r\nconst getYoutubeId = (url) => {\r\n    let regex = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n    let match = url.match(regex);\r\n    return (match && match[7].length === 11) ? match[7] : false;\r\n}\r\n\r\n// obtiene la informacion de un video\r\nconst getVideoInfo = async (id) => {\r\n    let videoInfo = await axios.get(`https://youtube.com/oembed?url=http://www.youtube.com/watch?v=${id}`);\r\n    return videoInfo.data;\r\n}\r\n\r\n// extrae el enlace del codigo fuente\r\nconst getLink = (html, bitrate = 128) => {\r\n\tlet regex = new RegExp(`https://y2convert.net/download/(.)*/mp3/${bitrate}/[0-9]*/(.*)/0`, 'g');\r\n\t\r\n\tif (regex.test(html)) {\r\n\t\t// usa expresiones regulares para extraer la url de 128 kbps\r\n\t\tlet url = html.match(regex);\r\n\r\n\t\treturn url.length > 0 ? url[0] : false;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n// genera los enlaces de descarga a travez del codigo fuente\r\nconst generateDownloadLinks = async (id) => {\r\n\r\n\tconst response = await axios.get(`https://y2convert.net/api/button/mp3/${id}`);\r\n\tconst html = response.data;\r\n\r\n\tconst bitrates = [64, 128, 192, 256, 320];\r\n\tlet result = [];\r\n\r\n    // itera los bitrates y comprueba si existe el enlace para tal\r\n\tfor (const bitrate of bitrates) {\r\n        const link = getLink(html, bitrate);\r\n        \r\n        if (link) {\r\n            result.push({bitrate: bitrate, url: link});\r\n        }\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n// extrae los enlaces de descarga e informacion del video\r\nconst youtubemp3 = async (url) => {\r\n    const videoId = getYoutubeId(url);\r\n\r\n    let videoInfo = await getVideoInfo(videoId);\r\n    let downloadLinks = await generateDownloadLinks(videoId);\r\n\r\n    if (downloadLinks.length > 0) {\r\n        return {\r\n            info: videoInfo,\r\n            links: downloadLinks\r\n        };\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { youtubemp3 };","import { youtubemp3 } from 'lib/youtubemp3';\r\nimport { Button, Form, Schema, Notification, toaster } from 'rsuite';\r\nimport { useState } from 'react';\r\n\r\nconst { StringType } = Schema.Types;\r\n\r\nconst youtubeRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com\\/watch|youtu\\.?be\\/).+$/;\r\n\r\nconst model = Schema.Model({\r\n    url: StringType()\r\n        .addRule((value, data) => {\r\n            // verifica si la url es de un video de youtube con una expresion regular\r\n            if (youtubeRegex.test(value)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }, 'Enlace no valido')\r\n        .isRequired('Este campo es requerido')\r\n});\r\n\r\nconst DownloadForm = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState();\r\n\r\n    // pinta en pantalla el widget de descarga\r\n    const startDownload = async () => {\r\n\r\n\r\n        const url = document.querySelector('input[name=\"url\"]').value;\r\n        if (!youtubeRegex.test(url) || url === '') return;\r\n\r\n        setLoading(() => true);\r\n\r\n\r\n        const result = await youtubemp3(url);\r\n\r\n        setLoading(() => false);\r\n\r\n        if (result) {\r\n            setData(() => result);\r\n        } else {\r\n            toaster.push(<Notification type=\"error\" header=\"Ah ocurrido un error\" />, { placement: 'topEnd' });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form model={model} className=\"youtubemp3-form\" onSubmit={startDownload}>\r\n                <h3 className=\"center\">YouTube MP3</h3>\r\n                <hr />\r\n                <Form.Group controlId=\"url\">\r\n                    <Form.Control className=\"youtubemp3-input\" placeholder=\"Url de youtube\" name=\"url\" />\r\n                </Form.Group>\r\n                <div className=\"youtubemp3-button\">\r\n                    <Button type=\"submit\" loading={loading}>\r\n                        Descargar\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n\r\n            {data && (\r\n                <div className=\"video-card\">\r\n                    <img src={data.info.thumbnail_url} alt=\"Portada\" />\r\n\r\n                    <h4>{data.info.title}</h4>\r\n                    <p>{data.info.author_name}s</p>\r\n\r\n                    {data.links.map((link, i) => (\r\n                        <a key={i} href={link.url} className=\"audio-link\">\r\n                            <i data-icon=\"file_download\"></i> Descargar en {link.bitrate} Kbps\r\n                        </a>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DownloadForm;","import DownloadForm from 'components/DownloadForm';\nimport 'rsuite/dist/rsuite.min.css';\nimport { CustomProvider } from 'rsuite';\nimport 'scss/main.scss';\n\nfunction App() {\n  return (\n    <CustomProvider theme=\"dark\">\n      <DownloadForm />\n    </CustomProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}